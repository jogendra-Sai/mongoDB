MongoDB aggregation framework provides a way to process and transform data that is strored in our mongoDB collections. It allows us to peform various operations using data aggregation tools such as aggregation pipelines, map-reduce functions, or singe-purpose aggregation methods.

Aggregation Pipeline:-

Aggregation pipeline is a framework in mongoDB and used to perform series of data transformations on the documents in a collection. we can do filtering, sorting, projecting and grouping.

Example: db.employees.aggregate([{$match:{status:"A"},{$group:{_id:"$cust_id",total:{"$sum":"$amount"}}},{$sort:{total:-1}])

Aggregation Concepts:

PipleLines: A Pipeline is a series of stages that are excecuted in order to process the data. Each stage transforms the data in someway and passes to the next stage. The output of last stage is the final result of the pipeline.

Stage: A stage is a single operation that is applied to the data. It can be simple transformation or a complex aggregation.

Operator: An operator is a special symbol that is used to perform a specific operation on the data.

Single Purpose Aggregates:
1) Count documents
ex: db.employees.countdouments({},skip:1,limit:2)  //{} condition  skip and limit are options
2) Distinct documentts
ex: db.emoployees.distinct("department")

Stage Operators:
1) $match
db.employees.aggregate([{$match:{department:{$exists:true}}]) //similar find query db.employees.find({"department":{$exists:true})

2) $Project (projections)
db.employees.aggregate([{$match:{department:{$exists:true},{$project:{_id:0,empName:1}}])

3)$group
db.employees.aggregate([{$match:{department:{$exists:true}},{$group:{_id:"$department"}}]) //groups the docs by department

4)$count
db.employees.aggregate[{"$count":"noOfEmployees"}]

db.employees.aggregate([{"$group":{_id:"$department"}},{"$count":'noOfDepartments'}])  //Grouping the employees based on department  and counting them

5) $sort, $limit, $out

db.employees.aggregate([{$sort:{salary:-1}},{$limit:3},{$out:"TopThreePaidEmployees"}]) //fetches the top 3 salarized employees and moved to collection TopThreePaidEmployees

$skip:-
Used to ignore some collections from result

ACCUMULATORS:
$sum: to count the no,of documents
$avg: to find average of one/more fields
$min: to fetch min value of a group
$max: to fetch maximum value of a group

Syntax: <<accumulatorName>> : "<<expression>>"   
         $avg : "$salary"

Fetch the no of employees and average salary for each department
db.employees.aggregate([{"$group":{_id:"$department","noOfEmployees":{$sum:1},"averageSalary":{$avg:"$salary"}}}])
//here $sum :1 counts the no,of employees under each department

Calculate the average role experience of employees under each department
db.employees.aggregate([{"$group":{_id:"$department","averageExperience":{$avg:{$sum:"$experience.roleExperience"}}}}])

Calculate the minimum & maximum salary of department
db.employees.aggregate([{"$group":{_id:"$department","minSalary":{$min:"$salary"},"maxSalary":{$max:"$salary"}}}])

Fetch the List of employees name and salary for each department
db.employees.aggregate([{"$group":{_id:"$department","employeeList":{$push:{employeeName:"$empName",salary:"$salary"}}}}])

$concat
If we want to combine two fields like {empData:"John - ETA"} here John is empName and ETA is department we need to use $concat operator

db.employees.aggregate([{$project:{_id:0,"empData":{$concat:["$empName", " - ", "$department"]}}}])

If empName or department is null then the response will be like {"empData":null} to avoid this we need to use $ifNull

db.employees.aggregate([{"$project":{_id:0,"empData":{$concat:[{"$ifNull":["$empName", "NA"]}," - ", {$ifNull:["$salry","NA"]}]}}}])

above query checks the null value and replaces it with NA {empData:"JOHN - NA"} or {empData:"NA - ETA"}

Date Operators: $year, $month

db.employees.aggregate([{$project:{_id:0,"birthYear":{$year:"$dateofBirth"}}}])
                                    
